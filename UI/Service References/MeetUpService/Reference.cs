//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UI.MeetUpService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MeetUpService.IMeetUpService")]
    public interface IMeetUpService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/GetAllMeetups", ReplyAction="http://tempuri.org/IMeetUpService/GetAllMeetupsResponse")]
        Data.MeetUp[] GetAllMeetups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/GetAllMeetups", ReplyAction="http://tempuri.org/IMeetUpService/GetAllMeetupsResponse")]
        System.Threading.Tasks.Task<Data.MeetUp[]> GetAllMeetupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/GetMeetUpById", ReplyAction="http://tempuri.org/IMeetUpService/GetMeetUpByIdResponse")]
        Data.MeetUp GetMeetUpById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/GetMeetUpById", ReplyAction="http://tempuri.org/IMeetUpService/GetMeetUpByIdResponse")]
        System.Threading.Tasks.Task<Data.MeetUp> GetMeetUpByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/CreateMeetUp", ReplyAction="http://tempuri.org/IMeetUpService/CreateMeetUpResponse")]
        Data.MeetUp CreateMeetUp(Data.MeetUp meetup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/CreateMeetUp", ReplyAction="http://tempuri.org/IMeetUpService/CreateMeetUpResponse")]
        System.Threading.Tasks.Task<Data.MeetUp> CreateMeetUpAsync(Data.MeetUp meetup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/UpdateMeetUp", ReplyAction="http://tempuri.org/IMeetUpService/UpdateMeetUpResponse")]
        Data.MeetUp UpdateMeetUp(string id, Data.MeetUp meetup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/UpdateMeetUp", ReplyAction="http://tempuri.org/IMeetUpService/UpdateMeetUpResponse")]
        System.Threading.Tasks.Task<Data.MeetUp> UpdateMeetUpAsync(string id, Data.MeetUp meetup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/DeleteMeetUp", ReplyAction="http://tempuri.org/IMeetUpService/DeleteMeetUpResponse")]
        void DeleteMeetUp(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeetUpService/DeleteMeetUp", ReplyAction="http://tempuri.org/IMeetUpService/DeleteMeetUpResponse")]
        System.Threading.Tasks.Task DeleteMeetUpAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeetUpServiceChannel : UI.MeetUpService.IMeetUpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeetUpServiceClient : System.ServiceModel.ClientBase<UI.MeetUpService.IMeetUpService>, UI.MeetUpService.IMeetUpService {
        
        public MeetUpServiceClient() {
        }
        
        public MeetUpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MeetUpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeetUpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeetUpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Data.MeetUp[] GetAllMeetups() {
            return base.Channel.GetAllMeetups();
        }
        
        public System.Threading.Tasks.Task<Data.MeetUp[]> GetAllMeetupsAsync() {
            return base.Channel.GetAllMeetupsAsync();
        }
        
        public Data.MeetUp GetMeetUpById(string id) {
            return base.Channel.GetMeetUpById(id);
        }
        
        public System.Threading.Tasks.Task<Data.MeetUp> GetMeetUpByIdAsync(string id) {
            return base.Channel.GetMeetUpByIdAsync(id);
        }
        
        public Data.MeetUp CreateMeetUp(Data.MeetUp meetup) {
            return base.Channel.CreateMeetUp(meetup);
        }
        
        public System.Threading.Tasks.Task<Data.MeetUp> CreateMeetUpAsync(Data.MeetUp meetup) {
            return base.Channel.CreateMeetUpAsync(meetup);
        }
        
        public Data.MeetUp UpdateMeetUp(string id, Data.MeetUp meetup) {
            return base.Channel.UpdateMeetUp(id, meetup);
        }
        
        public System.Threading.Tasks.Task<Data.MeetUp> UpdateMeetUpAsync(string id, Data.MeetUp meetup) {
            return base.Channel.UpdateMeetUpAsync(id, meetup);
        }
        
        public void DeleteMeetUp(string id) {
            base.Channel.DeleteMeetUp(id);
        }
        
        public System.Threading.Tasks.Task DeleteMeetUpAsync(string id) {
            return base.Channel.DeleteMeetUpAsync(id);
        }
    }
}
