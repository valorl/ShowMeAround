@model UI.Models.Registration
@{
    ViewBag.Title = "Register";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<div class="container-forms">
    @using (Html.BeginForm("Register", "Users", FormMethod.Post, new { @class = "form-signin" }))
    {
        @Html.ValidationSummary(true)
        <fieldset>
            @*<div class="container-forms">

                    <form class="form-signin"></form>
                </div>*@

            @*<div class="container-forms">*@
            @Html.AntiForgeryToken()
            @if (ViewBag.Message != null)
                {
                <div style="border:solid 1px green">
                    @ViewBag.Message
                </div>
            }
            <form class="form-signin">
                <h2 class="form-signin-heading">Register</h2>
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.User.FirstName, new { @class = "form-control", @placeholder = "First Name" })
                    <p class="help-block">@Html.ValidationMessageFor(model => model.User.FirstName)</p>

                    @Html.TextBoxFor(model => model.User.LastName, new { @class = "form-control", @placeholder = "Last Name" })
                    <p class="help-block">@Html.ValidationMessageFor(model => model.User.LastName)</p>

                    @Html.TextBoxFor(model => model.User.Email, new { @class = "form-control", @placeholder = "Email" })
                    <p class="help-block">@Html.ValidationMessageFor(model => model.User.Email)</p>

                    @Html.TextBoxFor(model => model.User.PwdHash, new { @class = "form-control", @placeholder = "Password", type = "password" })
                    <p class="help-block">@Html.ValidationMessageFor(model => model.User.PwdHash)</p>

                    @Html.TextBoxFor(model => model.User.ConfirmPassword, new { @class = "form-control", @placeholder = "Confirm Password", type = "password" })
                    <p class="help-block">@Html.ValidationMessageFor(model => model.User.ConfirmPassword)</p>

                    @Html.EditorFor(model => model.User.BirthDate, new { htmlAttributes = new { @class = "form-control datepicker", id = "datepicker", @placeholder = "BirthDate", type = "date" } })
                    <p class="help-block">@Html.ValidationMessageFor(model => model.User.BirthDate)</p>

                    @Html.EnumDropDownListFor(model => model.User.Gender, new { @class = "form-control" })
                    <p class="help-block">@Html.ValidationMessageFor(model => model.User.Gender)</p>
                </div>
                <div class="col-md-6">
                    @*<p>
                            @Html.DropDownListFor(model => model.Languages, ViewBag.LanguageList as IEnumerable<SelectListItem>, new { @class = "form-control form-control-languages", id = "languageList", })
                            <input type="button" name="Add Language" value="Add" id="btnAddLanguage" class="btn btn-list" />
                        </p>
                        @*<table class="table">
                            <tbody id="languagesBody"></tbody>
                        </table>*@

                    <p>
                        @Html.DropDownListFor(model => model.Language, ViewBag.LanguageList as IEnumerable<SelectListItem>, new { @class = "form-control form-control-languages", id = "languageList", })
                        <input type="button" value="Add" class="btn btn-list" id="btnAddLanguage" />
                    </p>
                    <table style="display: none" class="table" id="languagesBody">
                        <tr></tr>
                    </table>
                    <p>
                        @Html.DropDownListFor(model => model.Country, ViewBag.CountryList as IEnumerable<SelectListItem>, new { @class = "form-control form-control-languages", id = "countryList" })
                    </p>
                    <p>
                        <select id="User_City_Name" class="form-control form-control-languages" name="User.City.Name"></select>
                    </p>
                    @Html.LabelFor(model => model.Interests, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.EditorFor(m => m.Interests, new { htmlAttributes = new { @class = "form-control " } })
                    </div>

                    <button class="btn btn-lg btn-primary btn-block btn-success" type="submit">Register</button>

                </div>
            </form>
            @*</div>*@
        </fieldset>
    }
</div>




@section Scripts {
    @Scripts.Render()
    @Scripts.Render("~/Content/css")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")

    <script language="javascript" type="text/javascript">

        var addedLanguages = [];
        var table = $("#languagesBody");
        
        
        function addLanguageRow() {

            @{
                Model.LanguageContainer.Add(new Data.Language());
            }
            //var i = table.children("tr").length;
            var i = addedLanguages.length;
            var td_language = $('#languageList :selected').text();
            var index = $.inArray(td_language, addedLanguages);

            var indexCell = "<td style='display:none'><input name='LanguageContainer.Index' type='hidden' value='" + i + "' /></td>";
            var titleCell = "<td><input class ='form-control registration-listed-language' id='LanguageContainer_" + i + "__Name' name='LanguageContainer[" + i + "].Name' type='text' value='"
                + td_language + "' style='cursor: default; background-color: transparent; border:none; box-shadow:none;' readonly/></td>";
            var removeCell = "<td><button class='btn btn-danger' type='button' onclick='removeRow("
                + i + ")'><span class='glyphicon glyphicon-trash'></span></button></td>";

            if (index < 0) {
                $('#languagesBody tr:last').after("<tr id='languagesRow" + i + "'>" + indexCell + titleCell + removeCell + "</tr>");
                addedLanguages.push(td_language);
            }
            if (addedLanguages.length > 0) {
                table.show("fast", null);
            }

        }

        function removeRow(id) {
            var langToBeRemoved = "#languagesRow" + id;
            $(langToBeRemoved).remove();
            addedLanguages.splice(id, 1);
            if (addedLanguages.length <= 0) {
                table.hide("fast", null);
            }
        }
        $("#btnAddLanguage").click(addLanguageRow);

    </script>

    <script language="javascript" type="text/javascript">

        function populateCities() {
            var country = $("#countryList :selected").text();





            $.ajax({
                url: "http://localhost:37550/CountryService.svc/cities/" + country + "/",
                dataType: "json",
                crossDomain: true,
                async: true,
                success: function (result) {
                    var cities = '';
                    //if (result.length > 0) {
                    $.each(result, function (i, object) {
                        var option = '<option>' + object.Name + '</option>';
                        cities += option;

                        console.log(cities);
                    });

                    var cityDropDown = $("#User_City_Name");
                    cityDropDown.html(cities);
                    //}

                },
                error: function (xhr, status, error) {
                    var err = eval("(" + xhr.responseText + ")");
                    alert(err.Message);
                },
                complete: function () {
                    console.log("AJAX COMPLETE");
                }
            });


            //$.getJSON("http://localhost:37550/CountryService.svc/cities/" + country + "/", function (result) {
            //    for (var i = 0; i < result.length; i++) {
            //        var option =
            //            '<option value="' + result[i].Name.toLowerCase() + '">' + result[i].Name + '</option>';
            //        cities[i] = option;
            //    }

            //    cityDropDown.html(cities.join(''));
            //});

        }



        $("#countryList").change(populateCities);
    </script>
}
